extends MultiplayerSynchronizer

class_name PropertySynchronizer

var last_properties = {}
var saved_properties = {}
@export var Server = "127.0.0.1"
@export var Port = 4433
var multiplayer_peer = ENetMultiplayerPeer.new()
var cached_property_paths = {}
@onready var root = get_tree().root

func _ready():
	multiplayer.server_disconnected.connect(serverDisconnect)
	serverConnect()
	cache_property_paths(root,root.get_path())
	write_json(cached_property_paths,"res://Common/cached_property_paths.json")
	last_properties = gather_current_properties()
	saved_properties.merge(load_json("res://Common/to_sync.json"))
	var rootpath = str(root.get_children()[0].get_path()) + "/"
	add_replication_config(saved_properties,rootpath)

func _process(_delta):
	var current_properties = gather_current_properties()
	compare_changes(current_properties, last_properties)

func cache_property_paths(node: Node, node_path: String = ""):
	if not should_cache(node):
		return
	for child in node.get_children():
		var new_node_path = "%s/%s" % [node_path, child.get_name()]
		cache_property_paths(child, new_node_path)
	if node == root:
		return
	var property_list = gather_properties_from_node(node)
	if !property_list.is_empty():
		cached_property_paths[node_path] = property_list

func should_cache(node: Node) -> bool:
	if node == null:
		return false
	if node == self:
		return false
	if node == get_node("."):
		return false
	return true

func gather_properties_from_node(node: Node) -> Array:
	var property_list = []
	for property_info in node.get_property_list():
		if property_info.usage & PROPERTY_USAGE_STORAGE == 0:
			continue
		property_list.append(property_info.name)
	return property_list

#func gather_current_properties() -> Dictionary:
#	var current_properties = {}
#	for node_path in cached_property_paths.keys():
#		var node = get_node_or_null(node_path)
#		if !node:
#			continue
#		var properties_dict = {}
#		for property_path in cached_property_paths[node_path]:
#			properties_dict[property_path] = node.get(property_path)
#		current_properties[node_path] = properties_dict
#	return current_properties

func gather_current_properties() -> Dictionary:
	var current_properties = {}
	for node_path in cached_property_paths.keys():
		var node = get_node_or_null(node_path)
		if !node:
			continue
		var properties_dict = {}
		for property_path in cached_property_paths[node_path]:
			var value = node.get(property_path)
			properties_dict[property_path] = value
			if value is Object and !(value is Node):
				var sub_properties = gather_properties_recursive(value, property_path)
				for sub_key in sub_properties.keys():
					properties_dict[property_path + "." + sub_key] = sub_properties[sub_key]
		current_properties[node_path] = properties_dict
	return current_properties

func gather_properties_recursive(obj: Object, parent_property_path: String) -> Dictionary:
	var result = {}
	for property_info in obj.get_property_list():
		var value = obj.get(property_info.name)
		result[property_info.name] = value
		if value is Object and !(value is Node):
			var sub_properties = gather_properties_recursive(value, property_info.name)
			for sub_key in sub_properties.keys():
				result[property_info.name + "." + sub_key] = sub_properties[sub_key]
	return result

func compare_changes(current: Dictionary, last: Dictionary):
	for node_path in current.keys():
		if !last.has(node_path):
			continue
		for property_name in current[node_path].keys():
			var full_path = "%s.%s" % [node_path, property_name]
			if saved_properties.has(node_path):
				if saved_properties.has(property_name):
					continue
			if last[node_path][property_name] == current[node_path][property_name]:
				continue
			saved_properties.merge( { node_path : { property_name : true } } )
			write_json(saved_properties,"res://Common/to_sync.json")

func add_replication_config(saved_properties,rootpath):
	print(rootpath)
	for node_path in saved_properties.keys():
		for property_name in saved_properties[node_path].keys():
			if saved_properties[node_path][property_name]:
				replication_config.add_property(node_path.replace(rootpath,"")+":"+property_name)
				print(replication_config.get_properties())

func serverConnect():
	multiplayer_peer.create_client(Server, Port)
	multiplayer.multiplayer_peer = multiplayer_peer

func serverDisconnect():
	multiplayer_peer.close()

func load_json(path):
	var file = FileAccess.open(path, FileAccess.READ)
	var json_text = file.get_as_text()
	file.close()
	var json_data = JSON.parse_string(json_text)
	return json_data

func write_json(dict,path):
	var file = FileAccess.open(path, FileAccess.WRITE)
	var json = JSON.stringify(dict, "\t", true)
	file.store_string(json)
	file.close()


func _on_synchronized():
	print("_on_synchronized")
	pass # Replace with function body.


func _on_delta_synchronized():
	print("_on_delta_synchronized")
	pass # Replace with function body.
